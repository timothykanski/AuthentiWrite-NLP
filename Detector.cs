namespace AIWritingDetector
{
    public class Detector
    {
        private readonly string _text;
        private readonly string[] _sentences;

        public Detector(string text)
        {
            _text = text;
            // Split the text into sentences
            _sentences = _text.Split(new char[] { '.', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);
        }

        public Results Analyze()
        {
            return new Results
            {
                WordCount = GetSentenceLengths(),
                GradeLevels = GetGradeLevels(),
                SentenceVoices = IdentifySentenceVoices(),
                SentencePerspectives = IdentifySentencePerspectives(),
                ContractionCounts = CountContractions(),
                SlangWords = GetSlangWordsInSentences(),
                AverageWordLengths = GetAverageWordLengths(),
                StudentWords = GetStudentWordsInSentences()
            };
        }

        private List<int> GetGradeLevels()
        {
            // Flesch-Kincaid Grade Level calculation.
            List<int> complexityList = new List<int>();
            foreach (string sentence in _sentences)
            {
                string[] words = sentence.Split(' ');
                int wordCount = words.Length;
                int syllableCount = 0;
                foreach (string word in words)
                {
                    syllableCount += Helpers.CountSyllables(word);
                }
                double avgWordsPerSentence = (double)wordCount / 1;
                double avgSyllablesPerWord = (double)syllableCount / wordCount;
                double gradeLevel = 0.39 * avgWordsPerSentence + 11.8 * avgSyllablesPerWord - 15.59;
                complexityList.Add((int)Math.Round(gradeLevel));
            }
            return complexityList;
        }

        private List<int> GetSentenceLengths()
        {
            // Average Sentence Lengths:
            //  Middle school: 12 - 15 words.
            //  High school: 15 - 20 words.
            //  College level: 20 - 25 words.
            var retList = new List<int>();
            foreach (string sentence in _sentences)
            {
                string[] words = sentence.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                retList.Add(words.Length);
            }
            return retList;
        }

        private List<SentencePerspective> IdentifySentencePerspectives()
        {
            List<SentencePerspective> perspectiveList = new List<SentencePerspective>();
            foreach (string sentence in _sentences)
            {
                string[] words = sentence.Split(' ');
                int firstPersonCount = 0;
                int secondPersonCount = 0;
                int thirdPersonCount = 0;
                foreach (string word in words)
                {
                    if (word.ToLower() == "i" || word.ToLower() == "we" || word.ToLower() == "me" || word.ToLower() == "us")
                    {
                        firstPersonCount++;
                    }
                    else if (word.ToLower() == "you")
                    {
                        secondPersonCount++;
                    }
                    else if (word.ToLower() == "he" || word.ToLower() == "she" || word.ToLower() == "it" || word.ToLower() == "they" || word.ToLower() == "him" || word.ToLower() == "her" || word.ToLower() == "them")
                    {
                        thirdPersonCount++;
                    }
                }
                SentencePerspective sentencePerspective;
                if (firstPersonCount > 0 || secondPersonCount > 0)
                {
                    sentencePerspective = SentencePerspective.Personal;
                }
                else
                {
                    sentencePerspective = SentencePerspective.Impersonal;
                }
                perspectiveList.Add(sentencePerspective);
            }
            return perspectiveList;
        }

        private List<SentenceVoice> IdentifySentenceVoices()
        {
            /*
              Use of passive voice alone is not a definitive indicator of AI-generated writing: 
              While passive voice is more commonly used by AI language models than by human writers, 
              it is important to note that the use of passive voice alone is not a definitive indicator
              that the writing was generated by an AI language model. There are many reasons why a 
              human student might use passive voice, such as to emphasize the object of a sentence or
              to avoid assigning blame.
            */
            List<SentenceVoice> voiceList = new List<SentenceVoice>();
            foreach (string sentence in _sentences)
            {
                string[] words = sentence.Split(' ');
                bool isPassive = false;
                for (int i = 0; i < words.Length; i++)
                {
                    if (i + 1 < words.Length && words[i + 1].ToLower() == "by")
                    {
                        isPassive = true;
                        break;
                    }
                    if (i + 2 < words.Length && words[i + 1].ToLower() == "to" && words[i + 2].ToLower() == "be")
                    {
                        isPassive = true;
                        break;
                    }
                }
                SentenceVoice sentenceVoice;
                if (isPassive)
                {
                    sentenceVoice = SentenceVoice.Passive;
                }
                else
                {
                    sentenceVoice = SentenceVoice.Active;
                }
                voiceList.Add(sentenceVoice);
            }
            return voiceList;
        }

        private List<int> CountContractions()
        {
            List<int> contractionCountList = new List<int>();
            foreach (string sentence in _sentences)
            {
                int contractionCount = 0;
                string[] words = sentence.Split(' ');
                foreach (string word in words)
                {
                    if (Words.Contractions.Contains(word))
                    {
                        contractionCount++;
                    }
                }
                contractionCountList.Add(contractionCount);
            }
            return contractionCountList;
        }

        /*
         These words are less likely to be used by an AI like ChatGPT than by students because they are more
          likely to be part of a middle school student's vocabulary, which has been built through years of 
          learning and experience, rather than a pre-programmed database that an AI relies on for generating responses.
         While an AI like ChatGPT has been trained on a massive amount of text data, it still may not have 
          a deep understanding of certain concepts or contexts that are familiar to humans. Therefore, it may
          not use some of the less common or more nuanced vocabulary that a middle school student might use 
          in their writing.
         Furthermore, some of these words may be more commonly used in informal or spoken language, which 
          may be less represented in the kind of text data that an AI like ChatGPT has been trained on.
        */
        private List<string> GetStudentWordsInSentences()
        {
            List<string> result = new List<string>();

            foreach (string sentence in _sentences)
            {
                List<string> words = sentence.ToLower().Split(' ').ToList();
                List<string> slangWordsInSentence = new List<string>();

                foreach (string word in words)
                {
                    if (Words.StudentWords.Contains(word))
                    {
                        slangWordsInSentence.Add(word);
                    }
                }

                result.Add(string.Join(",", slangWordsInSentence));
            }

            return result;
        }

        // Words more commonly used in informal or spoken language


        private List<string> GetSlangWordsInSentences()
        {
            List<string> result = new List<string>();

            foreach (string sentence in _sentences)
            {
                List<string> words = sentence.ToLower().Split(' ').ToList();
                List<string> slangWordsInSentence = new List<string>();

                foreach (string word in words)
                {
                    if (Words.SlangWords.Contains(word))
                    {
                        slangWordsInSentence.Add(word);
                    }
                }

                result.Add(string.Join(",", slangWordsInSentence));
            }

            return result;
        }

        private List<int> GetAverageWordLengths()
        {
            // Average Word Lengths:
            //  Middle school: 4-6 characters
            //  High school: 5-7 characters
            //  College level: 6-8 characters
            //  Scientific: 8-10 characters

            List<int> avgWordLengths = new List<int>();
            foreach (string sentence in _sentences)
            {
                string[] words = sentence.Split(' ', StringSplitOptions.RemoveEmptyEntries);

                int totalLength = 0;
                foreach (string word in words)
                {
                    totalLength += word.Length;
                }

                int avgLength = words.Length > 0 ? totalLength / words.Length : 0;
                avgWordLengths.Add(avgLength);
            }

            return avgWordLengths;
        }


        

    }
}
